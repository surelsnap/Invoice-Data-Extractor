{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nilesh\\\\Desktop\\\\omdatta\\\\frontend\\\\src\\\\components\\\\FileUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport Results from './Results';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [downloadLink, setDownloadLink] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png'],\n      'application/pdf': ['.pdf']\n    },\n    maxFiles: 1,\n    multiple: false,\n    onDrop: files => handleFileUpload(files[0])\n  });\n  const handleFileUpload = async file => {\n    setIsLoading(true);\n    setError('');\n    setDownloadLink('');\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(process.env.REACT_APP_API_URL + '/upload', formData, {\n        responseType: 'blob'\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      setDownloadLink(url);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to process invoice');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: `dropzone ${isLoading ? 'loading' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-0\",\n        children: \"Drag & drop invoice file, or click to select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Results, {\n      downloadLink: downloadLink,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"dUtJgGBE3H50LAxW1EtCVr69y9c=\", false, function () {\n  return [useDropzone];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useDropzone","axios","Results","jsxDEV","_jsxDEV","FileUpload","_s","downloadLink","setDownloadLink","error","setError","isLoading","setIsLoading","getRootProps","getInputProps","accept","maxFiles","multiple","onDrop","files","handleFileUpload","file","formData","FormData","append","response","post","process","env","REACT_APP_API_URL","responseType","url","window","URL","createObjectURL","Blob","data","err","_err$response","_err$response$data","message","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nilesh/Desktop/omdatta/frontend/src/components/FileUpload.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport axios from 'axios';\r\nimport Results from './Results';\r\n\r\n\r\nconst FileUpload = () => {\r\n  const [downloadLink, setDownloadLink] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: {\r\n      'image/*': ['.jpeg', '.jpg', '.png'],\r\n      'application/pdf': ['.pdf']\r\n    },\r\n    maxFiles: 1,\r\n    multiple: false,\r\n    onDrop: files => handleFileUpload(files[0])\r\n  });\r\n\r\n  const handleFileUpload = async file => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    setDownloadLink('');\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await axios.post(\r\n        process.env.REACT_APP_API_URL + '/upload',\r\n        formData,\r\n        { responseType: 'blob' }\r\n      );\r\n\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      setDownloadLink(url);\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to process invoice');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        {...getRootProps()}\r\n        className={`dropzone ${isLoading ? 'loading' : ''}`}\r\n      >\r\n        <input {...getInputProps()} />\r\n        {isLoading ? (\r\n          <div className=\"spinner\"></div>\r\n        ) : (\r\n          <p className=\"mb-0\">Drag & drop invoice file, or click to select</p>\r\n        )}\r\n      </div>\r\n\r\n      <Results downloadLink={downloadLink} error={error} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}